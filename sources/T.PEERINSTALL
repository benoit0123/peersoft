NEWY EQU $47
 DO KOPT16
* For the Smart disassembler technology introduced
* in Peersoft v1.5 for 65816 systems
 DUMMY A1L
FC DS 1
FE DS 1
FM DS 1
FX DS 1
FCSTK DS 1
FXSTK DS 1
FMSTK DS 1
 DEND
 FIN

* This module deals with all installation stuff for the
* Peersoft suite
SUITE LDA #$9CD3 Compute the offset
 SEC ;Put it in :0+1 (lobyte)
 SBC DBUFP  and :1+1 (hibyte)
 STA :0+1
 LDA #>$9CD3
 SBC DBUFP+1
 TAX
 ORA :0+1
* If first utility to ask for memory this way, then ask for
* one additional page for our own purpose (i.e. Bananasoft
* or Peersoft)
 BEQ :6
 DEX
:6 STX :1+1

* Relocate code (don't move it yet)
 DO KOPT16
 LDA #1
 STA FE
 STA FX
 STA FM
 FIN
 LDA #AROMBA
 LDY #>AROMBA
]LOOP STA PCL
 CMP #FCODE-FNDVAR2+AROMBA
 TYA
 SBC #>FCODE-FNDVAR2+AROMBA
 BCS :4
 STY PCL+1
 DO KOPT-K65C02
 LDX #0
 FIN
 JSR MINSDS2
 LDY LENGTH
 CPY #2 Only relocates 3 bytes instr.
 BNE :3
 LDA (PCL),Y
 TAX
 DEY
 LDA (PCL),Y
 TAY
 CMP #FIN Only if adress within range
 TXA
 SBC #>FIN
 BCS :3 Must be < FIN to be relocated
 CPY #FNDVAR2
 TXA
 SBC #>FNDVAR2
 BCC :3 Must be >= FNDVAR2
 TYA  ;Relocates address
:0 SBC #0
 LDY #1
 STA (PCL),Y Low byte
 INY
 TXA
:1 SBC #0
 STA (PCL),Y High byte
:3 JSR PCADJ Adjust PCL to length byte
 JMP ]LOOP Loop

 FIN

* Relocate some non trivial references (i.e. instructions
* with immediate adressing mode).
:4 LDX #ADPFT-ADPFB-1
]LOOP LDA ADPFB+AROMBA-FNDVAR2,X
 SEC
 SBC :0+1
 STA ADPFB+AROMBA-FNDVAR2,X
 LDA ADPFT+AROMBA-FNDVAR2,X
 SBC :1+1
 STA ADPFT+AROMBA-FNDVAR2,X
 DEX
 BPL ]LOOP

 LDX #ADT1-ADB1-1
 LDA #0
 STA PCL
]LOOP LDA ADT1,X
 STA PCL+1
 LDY ADB1,X
 LDA (PCL),Y
 SEC
 SBC :0+1
 STA (PCL),Y
 LDA ADT2,X
 STA PCL+1
 LDY ADB2,X
 LDA (PCL),Y
 SBC :1+1
 STA (PCL),Y
 DEX
 BPL ]LOOP

 LDX #OFFSTT-OFFSTB-1
]LOOP LDA OFFSTB+AROMBA-FNDVAR2,X
 SEC
 SBC :0+1
 STA OFFSTB+AROMBA-FNDVAR2,X
 LDA OFFSTT+AROMBA-FNDVAR2,X
 SBC :1+1
 STA OFFSTT+AROMBA-FNDVAR2,X
 DEX
 BPL ]LOOP
* Move the code
 LDA #CGARBAG
 LDX #>CGARBAG
 SEC
 SBC :0+1
 STA A4L
 TXA
 SBC :1+1
 STA A4L+1

 LDA #CGARBAG+AROMBA-FNDVAR2
 LDX #>CGARBAG+AROMBA-FNDVAR2
 STA A1L
 STX A1L+1

 STID FIN-1+AROMBA-FNDVAR2;A2L

 LDY #0
 BIT $C081
 BIT $C081
 JSR MOVE
* Reconstruct DOS buffers below PeerSoft
 LDA DBUFP
 LDX DBUFP+1
 CMP #$9CD3
 BNE :7
 CPX #>$9CD3
 BNE :7 One more page if first utility
 DEX  ; to install this way
:7 SEC
 SBC #LONGLANG
 TAY
 TXA
 SBC #>LONGLANG
 STY DBUFP New DOS base buffer address
 STA DBUFP+1
 JSR $A7D4

 LDA #VERSION
 STA PVERSION
 LDA #$80
 STA OPTCGOTO
 DO KOPT-K6502
 STZ NEEDDEC
 ELSE
 ASL ;Let zero acc
 STA NEEDDEC
 FIN

* Number of Applesoft instruction runs
* between two consecutives context switches
 LDA #10
 STA ICTRACTV
 DO KOPT-K65C02
 LDA #0
 STA MTACTV
 ELSE
 STZ MTACTV
 FIN
 LDA #$4C
 STA REVECTOR
 STA VGARBAG
 SEC
 LDA #ROUTGEN
 SBC :0+1
 STA REVECTOR+1
 LDA #>ROUTGEN
 SBC :1+1
 STA REVECTOR+2
 LDA #NPTRGL90
 SBC :0+1
 STA VNPTRG90
 LDA #>NPTRGL90
 SBC :1+1
 STA VNPTRG90+1
 LDA #NARRGL91
 SBC :0+1
 STA VNARRG91
 LDA #>NARRGL91
 SBC :1+1
 STA VNARRG91+1
 LDA #TABOFB
 SBC :0+1
 STA ADADR
 LDA #>TABOFB
 SBC :1+1
 STA ADADR+1
 LDX #GARBAG
 LDA #>GARBAG
 BIT MEMORY
 BPL *+13
 LDA #NGARBAG
 SBC :0+1
 TAX
 LDA #>NGARBAG
 SBC :1+1
 STX VGARBAG+1
 STA VGARBAG+2
 LDA #NDSVCMD New DOS Save for applesoft
 SBC :0+1
 STA $A3A6
 LDA #>NDSVCMD
 SBC :1+1
 STA $A3A7
 LDA #NDLVCMD Part of routine for loading
 SBC :0+1
 STA $A42E
 LDA #>NDLVCMD
 SBC :1+1
 STA $A42F
 LDA #$20
 STA $9E9E
 LDA #NKBDINT
 SBC :0+1
 STA $9E9F
 LDA #>NKBDINT
 SBC :1+1
 STA $9EA0
 JSR BIGRECON
 JSR MOUSEDET
 BIT MEMORY
 BVC :44
* Copy $F8-$FF pages within ROM to main and aux
* memory banks
 JSR COPYROM
* Initialize BF page
 JSR INITBF
 JSR MZRTAUX
:44 BIT $C080
 BIT $C080
* If Applesoft is the active language, so
* install Peersoft CHRGET/CHRGOT patch
EK LDA $AAB6
 BEQ :11
 BIT $C081
 BIT $C081
 JSR SETUPB
:11 JMP SETUPD

MZRTAUX LDA #$BF
 LDX #0
 STA $03EE
 STX $03ED
 CLV
 SEC
 JMP XFER

 DO KOPT-K6502
MC DO KOPT16
 HEX A383F4D4 LDA d,S/STA d,S/PEA/PEI
 HEX 9BBB TXY/TYX
 FIN
 HEX DAFA041A3A PHX/PLX/TSB d/INC/DEC
 HEX 7C807A5A JMP (abs, X)/BRA d/PLY/PHY
 HEX 649E STZ d/STZ a, X
 HEX 0C9C TSB a/STZ a
 HEX 1C14 TRB a/TRB d
 HEX B2 LDA (d)
 DO KOPT16
MC1 HEX 1838FB CLC/SEC/XCE
 HEX 0828 PHP/PLP
 HEX C2E2 REP/SEP
 HEX A2A0 LDX #/LDY #
 FIN
LN DO KOPT16
 HEX 01010201 LDA d,S/STA d,S/PEA/PEI
 HEX 0000 TXY/TYX
 FIN
 HEX 0000010000 PHX/PLX/TSB d/INC/DEC
 HEX 02010000 JMP (abs, X)/BRA d/PLY/PHY
 HEX 0102 STZ d/STZ a, X
 HEX 0202 TSB a/STZ a
 HEX 0201 TRB a/TRB d
 HEX 01 LDA (d)
 DO KOPT16
 HEX 000000 CLC/SEC/XCE
 HEX 0000 PHP/PLP
 HEX 0101 REP/SEP
 HEX 0101 LDX #/LDY #
 FIN
* Check 65C02/65802 used and new machine codes
MINSDS2 LDA (PCL)
 LDX #LN-MC-1
]LOOP CMP MC,X
 BEQ :0
 DEX
 BPL ]LOOP
 INX ;X = 0
 DO KOPT16
* Grabs all immediate Opcodes with Accumulator
* eg LDA #, ADC #, ORA # and so on..
 TAY
 AND #$1F
 CMP #$09
 BNE :1
 LDA FE
 ORA FM
 BNE :1
 LDA #2
 STA LENGTH
 RTS
:1 TYA
 FIN
 JMP INSDS2
:0 LDA LN,X
 STA LENGTH
 DO KOPT16
 CPX #MC1-MC
 BCS *+5
 LDX #0
 RTS
 LDA OFFX16-MC1+MC,X
 STA OPBASE-1
 BRA *
OPBASE EQU *
OPCLC STZ FC
 RTS
OPSEC LDA #1
 STA FC
 RTS
OPXCE LDA FE
 LDY FC
 STA FC
 STY FE
 BEQ :0
 STY FX
 STY FM
:0 RTS
OPPHP LDA FC
 STA FCSTK
 LDA FX
 STA FXSTK
 LDA FM
 STA FMSTK
 RTS
OPPLP LDA FCSTK
 STA FC
 LDA FE
 BNE :0
 LDA FXSTK
 STA FX
 LDA FMSTK
 STA FM
:0 RTS
OPSEP LDX #1
 HEX 2C Skip next two bytes
OPREP LDX #0
 LDY #1
 LDA (PCL),Y
 TAY
 AND #1 bit C involved
 BEQ :0 No
 STX FC
:0 LDA FE
 BNE :1
 TYA
 AND #$20 bit M involved
 BEQ :2
 STX FM
:2 TYA
 AND #$10 bit X involved
 BEQ :1
 STX FX
:1 RTS
OPLDXYI LDA FE
 ORA FX
 BNE :0
 INC LENGTH
:0 RTS
 ELSE
 RTS
 FIN
 ELSE
MINSDS2 EQU INSDS2
 FIN

 DO KOPT16
OFFX16 DFB OPCLC-OPBASE,OPSEC-OPBASE,OPXCE-OPBASE
 DFB OPPHP-OPBASE,OPPLP-OPBASE
 DFB OPSEP-OPBASE,OPREP-OPBASE
 DFB OPLDXYI-OPBASE,OPLDXYI-OPBASE
 FIN
ADB1 DFB EK+9
 DFB EK+12
 DFB SETUPB+7+AROMBA-FNDVAR2
 DFB SETUPB+15+AROMBA-FNDVAR2
 DFB SETUPD+1+AROMBA-FNDVAR2
 DFB STP1+1+AROMBA-FNDVAR2
 DFB SFE1+1+AROMBA-FNDVAR2
 DFB SETLTR+1
 DO KOPTLNG33
 DFB TOFFST2+AROMBA-FNDVAR2
 FIN
 DFB GN65536+1+AROMBA-FNDVAR2
 DFB GN32768+1+AROMBA-FNDVAR2
 DFB GP65536+1+AROMBA-FNDVAR2
 DO KOPT16
 DFB NAMNTFND+4
 ELSE
 DFB NAMNTFND+5
 FIN
 DO KOPT16
 ELSE
 DFB V3B+1+AROMBA-FNDVAR2
 FIN
ADT1 DFB >EK+9
 DFB >EK+12
 DFB >SETUPB+7+AROMBA-FNDVAR2
 DFB >SETUPB+15+AROMBA-FNDVAR2
 DFB >SETUPD+1+AROMBA-FNDVAR2
 DFB >STP1+1+AROMBA-FNDVAR2
 DFB >SFE1+1+AROMBA-FNDVAR2
 DFB >SETLTR+1
 DO KOPTLNG33
 DFB >TOFFST2+AROMBA-FNDVAR2
 FIN
 DFB >GN65536+1+AROMBA-FNDVAR2
 DFB >GN32768+1+AROMBA-FNDVAR2
 DFB >GP65536+1+AROMBA-FNDVAR2
 DO KOPT16
 DFB >NAMNTFND+4
 ELSE
 DFB >NAMNTFND+5
 FIN
 DO KOPT16
 ELSE
 DFB >V3B+1+AROMBA-FNDVAR2
 FIN
ADB2 DFB EK+10
 DFB EK+13
 DFB SETUPB+11+AROMBA-FNDVAR2
 DFB SETUPB+19+AROMBA-FNDVAR2
 DFB SETUPD+6+AROMBA-FNDVAR2
 DFB STP1+3+AROMBA-FNDVAR2
 DFB SFE1+3+AROMBA-FNDVAR2
 DFB SETLTR+5
 DO KOPTLNG33
 DFB TOFFST2PF+AROMBA-FNDVAR2
 FIN
 DFB GN65536+3+AROMBA-FNDVAR2
 DFB GN32768+3+AROMBA-FNDVAR2
 DFB GP65536+3+AROMBA-FNDVAR2
 DO KOPT16
 DFB NAMNTFND+5
 ELSE
 DFB NAMNTFND+12
 FIN
 DO KOPT16
 ELSE
 DFB V3T+1+AROMBA-FNDVAR2
 FIN
ADT2 DFB >EK+10
 DFB >EK+13
 DFB >SETUPB+11+AROMBA-FNDVAR2
 DFB >SETUPB+19+AROMBA-FNDVAR2
 DFB >SETUPD+6+AROMBA-FNDVAR2
 DFB >STP1+3+AROMBA-FNDVAR2
 DFB >SFE1+3+AROMBA-FNDVAR2
 DFB >SETLTR+5
 DO KOPTLNG33
 DFB >TOFFST2PF+AROMBA-FNDVAR2
 FIN
 DFB >GN65536+3+AROMBA-FNDVAR2
 DFB >GN32768+3+AROMBA-FNDVAR2
 DFB >GP65536+3+AROMBA-FNDVAR2
 DO KOPT16
 DFB >NAMNTFND+5
 ELSE
 DFB >NAMNTFND+12
 FIN
 DO KOPT16
 ELSE
 DFB >V3T+1+AROMBA-FNDVAR2
 FIN

BIGRECON BIT $C081
 BIT $C081
* What is the model/ROM version of the Apple
 LDY #8-1
 LDA $FBB3
 EOR $FBC0
 EOR $FBBF
]LOOP CMP MACMAT,Y
 BEQ :1
 DEY
 BPL ]LOOP
 INY ;Assuming default 2+
* Apple //e enhanced ROM and //gs have same signature,
* so we ll make the difference on $FC5C
* value ($EB in a //gs ROM)
:1 CPY #2
 BNE :2
 LDA $FC5C
 CMP #$EB
 BNE :2
 LDY #8 //gs!
 CLC
 HEX FB ;XCE: Enter native mode
 PHP ;Push carry status (old emu bit)
 HEX C230 Set 16bits mode
 JSR $FE1F Call ID firmware routine
 STY NEWY
 PLP  ;Restore original emulation bit
 HEX FB ;XCE: Exit native mode
 LDY #12
 LDA NEWY+1
 BNE :2
 LDA NEWY
 ORA #8
 TAY

:2 LDA MCODE,Y
 STA MACHINE
 TYA
 TAX
 BNE :3 00 if Apple 2+
* Test for Apple2+, X=0 upon entry
* Possible language card being there..
 BIT $C083
 BIT $C083
 LDA $D000
 INY
 STY $D000
 CPY $D000 Read after write (1st)
 BNE :5
 INC $D000
 INY
 CPY $D000 Read after increment (2nd)
 BNE :5
 INX
:5 STA $D000
 LDA CFA,X
 LDX #0
 BEQ :4
:3 CMP #4 Apple //c or //gs?
 LDA #$C0
 LDX #$80
 BCS :4 Yes
 JSR TEST2E
:4 STA MEMORY
 STX VID80C
 RTS

MACMAT HEX EA2DE6E7F9060502
MCODE HEX 00 Apple 2+
 HEX 404142 Apple //e
 HEX 80818283 Apple //c
 HEX C0C1C2C3C4C5 Apple //gs
CFM HEX 8080C0C0
CFA HEX 008080C0

DATA1IDX DFB 5,7,11,12,17,251
DATA1VAL HEX 3818012000D6
* Routine to detect a mouse card
MOUSEDET LDX #$C7
 STX AUXPTR+1
 STX MOSL ;b7 of MOSL set to 1
 DO KOPT-K6502
 STZ AUXPTR
 STZ MOCN
 STZ MON0
 ELSE
 LDX #0
 STX AUXPTR
 STX MOCN
 STX MON0
 FIN
]LOOP LDX #DATA1VAL-DATA1IDX-1
]LOOP1 LDY DATA1IDX,X
 LDA DATA1VAL,X
 EOR (AUXPTR),Y
 BNE :1
 DEX
 BPL ]LOOP1
 LDA AUXPTR+1
 STA MOCN
 AND #$F
 STA MOSL
 LUP 4
 ASL
 --^
 STA MON0
 INX ;X = 0
 CPX MACHINE Is host an Apple2 or 2+?
 BNE :2
* Time to INITMOUSE..
 LDY #$19 Offset to INIT mouse offset
 LDA (AUXPTR),Y
 STA AUXPTR
 LDX AUXPTR+1
 LDY MON0
 JSR :0
 BCC :2
 ROR MOSL Let set b7 of mouse slot
:2 LDX #OM_INI-OM_DEB
 DO KOPT-K6502
 STZ AUXPTR
 ELSE
 LDA #0
 STA AUXPTR
 FIN
]JLOOP LDY OM_DEB,X
 LDA (AUXPTR),Y
 STA OM_DEB,X
 DEX
 BPL ]JLOOP
 RTS
:1 LDX AUXPTR+1
 CPX #$C1
 DEC AUXPTR+1
 BCS ]LOOP
:FIN RTS
:0 JMP (AUXPTR)

* Routine to copy ROM to bank switched RAM
COPYROM LDY #0
 LDA #$F8
 STY A1L
 STA A1L+1
 STA $C009 Write into aux ZP
 STY A1L
 STA A1L+1
 STA $C008 Write back into main ZP
 BIT $C089 Write into LC ram
 BIT $C089
]LOOP LDA (A1L),Y
 STA (A1L),Y within main memory
 STA $C009 Write into aux memory LC bank
 STA (A1L),Y
 STA $C008 Back to writing to main memory
 INY
 BNE ]LOOP
 INC A1L+1
 LDA A1L+1
 STA $C009
 STA A1L+1
 STA $C008
 BNE ]LOOP
 BIT $C081
 BIT $C081
 RTS

* Routine to test //e configuration: 80 col. card?
* memory expansion?
TEST2E PHP
 SEI
 LDX #0
 LDA $C017
 BMI :6
 INX
 LDA $C01D
 PHA
 LDA $C018
 PHA
 LDA $C01C
 PHA
]LOOP LDA $C019
 BMI ]LOOP
 STA $C057
 STA $C001
 STA $C055
 LDA $400
 PHA
 LDA $2400
 PHA
 LDA #$EE
 STA $0400
 LDA $2400
 CMP #$EE
 BNE :2
 ASL $2400
 LDA $0400
 CMP $2400
 BEQ :3
:2 INX
 LDA #$0F
 STA $C0B9
 STA $C054
 LDA $0400
 STA $0400
 STA $C0B8
 STA $C055
 LDA $0400
 BMI :3
 INX
:3 PLA
 STA $2400
 PLA
 STA $0400
 PLA
 BMI :4
 STA $C054
:4 PLA
 BMI :5
 STA $C000
:5 PLA
 BMI :6
 STA $C056
* X=0: No 80 col. card in aux. slot
* X=1: 80 col. card w/o memory expansion
* X=2: 80 col. card with at least 64K mem. expansion
* X=3: Same as above + special video modes (Eve le chat mauve)
:6 LDA CFM,X
 PHA
 LDA CFA,X
 TAX
 PLA
 PLP
 RTS
 O                                                              